{
    "docs": [
        {
            "location": "/", 
            "text": "Team Waterloop\n\n\nCanada's Hyperloop, designed and built at the University of Waterloo.\nThis is the documentation hub for all components of our pod.\n\n\nThis site is not intended for sharing outside of the team.\n\n\nAdding documentation\n\n\n\n\n\n\ngit clone https://github.com/teamwaterloop/docs\n\n\n\n\n\n\nEdit the relevant files in the \ndocs\n folder. Files are written in \n    \nMarkdown\n, with a couple of \n    \nextensions\n.\n\n\n\n\n\n\nModify the navigation bar in \nmkdocs.yml\n as necessary.\n\n\n\n\n\n\ngit commit -m \"\na brief descriptive message about what you added\n\"\n\n\n\n\n\n\ngit push origin master\n\n\n\n\n\n\nAfter pushing, the updated documentation will be compiled and deployed to \n\ndocs.teamwaterloop.ca\n within a couple of minutes.\n\n\nBuilding locally\n\n\nTo build locally, you need to first install Python, then do the following:\n\n\n\n\n\n\npip install mkdocs mkdocs-cinder\n\n\n\n\n\n\nmkdocs build\n\n\n\n\n\n\ncd site\n\n\n\n\n\n\nIf Python 3: \npython -m http.server 4000\n, if Python 2: \npython -m SimpleHTTPServer 4000\n\n\n\n\n\n\nAnd then navigate to \nlocalhost:4000\n to see your work!", 
            "title": "Home"
        }, 
        {
            "location": "/#team-waterloop", 
            "text": "Canada's Hyperloop, designed and built at the University of Waterloo.\nThis is the documentation hub for all components of our pod.  This site is not intended for sharing outside of the team.", 
            "title": "Team Waterloop"
        }, 
        {
            "location": "/#adding-documentation", 
            "text": "git clone https://github.com/teamwaterloop/docs    Edit the relevant files in the  docs  folder. Files are written in \n     Markdown , with a couple of \n     extensions .    Modify the navigation bar in  mkdocs.yml  as necessary.    git commit -m \" a brief descriptive message about what you added \"    git push origin master    After pushing, the updated documentation will be compiled and deployed to  docs.teamwaterloop.ca  within a couple of minutes.", 
            "title": "Adding documentation"
        }, 
        {
            "location": "/#building-locally", 
            "text": "To build locally, you need to first install Python, then do the following:    pip install mkdocs mkdocs-cinder    mkdocs build    cd site    If Python 3:  python -m http.server 4000 , if Python 2:  python -m SimpleHTTPServer 4000    And then navigate to  localhost:4000  to see your work!", 
            "title": "Building locally"
        }, 
        {
            "location": "/software-systems/", 
            "text": "Software Systems\n\n\nOur \nSuperdoc\n \nis currently our main source of information; that will slowly be migrated here.\n\n\nComms Interfaces\n\n\n\n\n\n\nArduino-Electrical interface: \nPinout\n\n\n\n\n\n\nRaspberry Pi-Arduino interface: \nSerial Comms Spec\n\n\n\n\n\n\nDashboard-Raspberry Pi interface: WebSocket Comms Spec - \ntodo\n\n\n\n\n\n\nRaspberry Pi setup and configuration\n\n\n\n\n\n\nFlash an OS onto your RPi\n.\n\n\n\n\nWe are using Raspbian because it's the best-supported RPi OS, and it has a GUI which is helpful when resolving networking problems.\n\n\n\n\n\n\n\n\nConfigure the RPi to be remotely accessible.\n\n\n\n\nHook up your RPi to microUSB power, a monitor, and a keyboard. Log in.\n\n\nWe are using a RPi3, so we have a Wifi module built in. If you are using an older RPi, then you might have to configure your USB Wifi dongle.\n\n\nConnect to the Wifi, either through the GUI or by editing \n/etc/network/interfaces\n. Make sure it automatically connects when in range.\n\n\nRun \nsudo apt-get update\n. This is just always a good thing to do after installing.\n\n\nEnable SSH\n.\n\n\n\n\n\n\n\n\nSet up a static ip on the RPi:\n\n\n\n\nConfigure DHCPD: \nsudo nano /etc/dhcpcd.conf\n\n\n\n\nAt the very bottom of the file, add the following lines:\n\n\ninterface wlan0\n\nstatic ip_address=192.168.0.200/24\nstatic routers=192.168.0.1\nstatic domain_name_servers=192.168.0.1\n\n\n\n\n\n\n\nReboot \nsudo reboot\n and check that it worked \nifconfig\n under wlan0 interface you should see your specified IP address.\n\n\n wlan0     Link encap:Ethernet  HWaddr 00:0F:20:CF:8B:42\n           inet addr:192.168.0.1  Bcast:217.149.127.63  Mask:255.255.255.192\n           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n           RX packets:2472694671 errors:1 dropped:0 overruns:0 frame:0\n           TX packets:44641779 errors:0 dropped:0 overruns:0 carrier:0\n           collisions:0 txqueuelen:1000\n\n\n\n\n\n\n\nNOTE:\n Wifi is being used for convenience during testing. For competition, we need to use interface \neth0\n, since RPi will be connected to the SpaceX NAP.\nSpaceX allows us to use \n192.168.0.6-254\n inclusive. Gateway is \n192.168.0.1\n. DHCP and DNS are not available.\n\n\n\n\n\n\n\n\n\n\nRemotely access the RPi.\n\n\n\n\nYou can now disconnect your RPi from the monitor and keyboard. Keep it plugged into power.\n\n\nRun \nssh pi@\nipaddr\n. This is now a shell.\n\n\n\n\n\n\n\n\nNodeJS should come pre-installed, but Raspbian's built-in version is very old.\n\n\n\n\nMake sure you have node and npm installed properly by observing the output of \nnode -v\n and \nnpm -v\n.\n\n\nIf your version is below 4.2, then you should update node:\n$ sudo npm cache clean -f\n$ sudo npm install -g n\n$ sudo n stable\n\n\n\n\n\n\n\n\n\n\n\nMake the RPi run the server upon startup, and restart it upon crash:\n\n\n\n\nInstall the PM2 process manager globally: \nsudo npm install -g pm2\n\n\n\n\nRun the startup configuration command provided by PM2.\n\n\n$ pm2 startup systemd\n[PM2] Init System found: systemd\n[PM2] You have to run this command as root. Execute the following command:\n\ncommand given may vary\n\n\n\n\n\n\n\n\nRun the server with PM2:\n\n\n$ pm2 start server.js\n$ pm2 save\n\n\n\n\n\n\n\nNow the server will start on boot, and logs can be retrieved via \npm2 logs\n.", 
            "title": "Software Systems"
        }, 
        {
            "location": "/software-systems/#software-systems", 
            "text": "Our  Superdoc  \nis currently our main source of information; that will slowly be migrated here.", 
            "title": "Software Systems"
        }, 
        {
            "location": "/software-systems/#comms-interfaces", 
            "text": "Arduino-Electrical interface:  Pinout    Raspberry Pi-Arduino interface:  Serial Comms Spec    Dashboard-Raspberry Pi interface: WebSocket Comms Spec -  todo", 
            "title": "Comms Interfaces"
        }, 
        {
            "location": "/software-systems/#raspberry-pi-setup-and-configuration", 
            "text": "Flash an OS onto your RPi .   We are using Raspbian because it's the best-supported RPi OS, and it has a GUI which is helpful when resolving networking problems.     Configure the RPi to be remotely accessible.   Hook up your RPi to microUSB power, a monitor, and a keyboard. Log in.  We are using a RPi3, so we have a Wifi module built in. If you are using an older RPi, then you might have to configure your USB Wifi dongle.  Connect to the Wifi, either through the GUI or by editing  /etc/network/interfaces . Make sure it automatically connects when in range.  Run  sudo apt-get update . This is just always a good thing to do after installing.  Enable SSH .     Set up a static ip on the RPi:   Configure DHCPD:  sudo nano /etc/dhcpcd.conf   At the very bottom of the file, add the following lines:  interface wlan0\n\nstatic ip_address=192.168.0.200/24\nstatic routers=192.168.0.1\nstatic domain_name_servers=192.168.0.1    Reboot  sudo reboot  and check that it worked  ifconfig  under wlan0 interface you should see your specified IP address.   wlan0     Link encap:Ethernet  HWaddr 00:0F:20:CF:8B:42\n           inet addr:192.168.0.1  Bcast:217.149.127.63  Mask:255.255.255.192\n           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n           RX packets:2472694671 errors:1 dropped:0 overruns:0 frame:0\n           TX packets:44641779 errors:0 dropped:0 overruns:0 carrier:0\n           collisions:0 txqueuelen:1000    NOTE:  Wifi is being used for convenience during testing. For competition, we need to use interface  eth0 , since RPi will be connected to the SpaceX NAP.\nSpaceX allows us to use  192.168.0.6-254  inclusive. Gateway is  192.168.0.1 . DHCP and DNS are not available.      Remotely access the RPi.   You can now disconnect your RPi from the monitor and keyboard. Keep it plugged into power.  Run  ssh pi@ ipaddr . This is now a shell.     NodeJS should come pre-installed, but Raspbian's built-in version is very old.   Make sure you have node and npm installed properly by observing the output of  node -v  and  npm -v .  If your version is below 4.2, then you should update node: $ sudo npm cache clean -f\n$ sudo npm install -g n\n$ sudo n stable      Make the RPi run the server upon startup, and restart it upon crash:   Install the PM2 process manager globally:  sudo npm install -g pm2   Run the startup configuration command provided by PM2.  $ pm2 startup systemd\n[PM2] Init System found: systemd\n[PM2] You have to run this command as root. Execute the following command: command given may vary     Run the server with PM2:  $ pm2 start server.js\n$ pm2 save    Now the server will start on boot, and logs can be retrieved via  pm2 logs .", 
            "title": "Raspberry Pi setup and configuration"
        }
    ]
}